=================================================================================================
                                      Kubernetes Service Account
=================================================================================================
apiVersion: v1
kind: ServiceAccount
metadata:
  name: aws-load-balancer-controller
  namespace: kube-system
  annotations:
    eks.amazonaws.com/role-arn: arn:aws:iam::123456789012:role/AmazonEKSLoadBalancerControllerRole
=================================================================================================
                            Deployment files: Frontenc,Backend,database
=================================================================================================

1. frontend-deployment.yaml

apiVersion: apps/v1
kind: Deployment
metadata:
  name: frontend
spec:
  replicas: 2
  selector:
    matchLabels:
      app: frontend
  template:
    metadata:
      labels:
        app: frontend
    spec:
      serviceAccountName: aws-load-balancer-controller  
      containers:
        - name: nginx
          image: nginx:latest
          ports:
            - containerPort: 80

apiVersion: v1
kind: Service
metadata:
  name: frontend
spec:
  selector:
    app: frontend
  ports:
    - port: 80
      targetPort: 80
  type: ClusterIP


------------------------------------------------------------------------------------

✅ 2. backend-deployment.yaml

apiVersion: apps/v1
kind: Deployment
metadata:
  name: backend
spec:
  replicas: 2
  selector:
    matchLabels:
      app: backend
  template:
    metadata:
      labels:
        app: backend
    spec:
      containers:
        - name: backend
          image: kennethreitz/httpbin
          ports:
            - containerPort: 80
          env:
            - name: DB_HOST
              value: mydb.default.svc.cluster.local


apiVersion: v1
kind: Service
metadata:
  name: backend
spec:
  selector:
    app: backend
  ports:
    - port: 80
      targetPort: 80
  type: ClusterIP

-----------------------------------------------------------------------------------------
✅ 3. db-deployment.yaml

apiVersion: apps/v1
kind: Deployment
metadata:
  name: mydb
spec:
  replicas: 1
  selector:
    matchLabels:
      app: mydb
  template:
    metadata:
      labels:
        app: mydb
    spec:
      containers:
        - name: postgres
          image: postgres:13
          env:
            - name: POSTGRES_PASSWORD
              value: example
          ports:
            - containerPort: 5432

apiVersion: v1
kind: Service
metadata:
  name: mydb
spec:
  selector:
    app: mydb
  ports:
    - port: 5432
      targetPort: 5432
  type: ClusterIP  # Only accessible inside cluster
=================================================================================================
                            Ingress
=================================================================================================

1. frontend-deployment.yaml
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: alb-ingress
  namespace: default
  annotations:
    kubernetes.io/ingress.class: alb
    alb.ingress.kubernetes.io/scheme: internet-facing
    alb.ingress.kubernetes.io/target-type: ip
    alb.ingress.kubernetes.io/listen-ports: '[{"HTTP": 80}]'
    alb.ingress.kubernetes.io/group.name: my-app-group
    alb.ingress.kubernetes.io/conditions.backend: >
      [{"field":"source-ip","sourceIpConfig":{"values":["203.0.113.0/24"]}}]
spec:
  rules:
    - host: your-app.example.com
      http:
        paths:
          - path: /frontend
            pathType: Prefix
            backend:
              service:
                name: frontend
                port:
                  number: 80
          - path: /backend
            pathType: Prefix
            backend:
              service:
                name: backend
                port:
                  number: 80
