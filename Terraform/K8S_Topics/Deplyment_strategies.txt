===============================================================================================================
ROLLING UPDATE
===============================================================================================================
  maxSurge > Default -25%
  maxUnavailable > Default - 25%
  Default Strategy
----------------------------------------------------------------------------------------------------------------
kubectl patch is a Kubernetes command used to modify a live Kubernetes object directly without using YAML files.
‚úÖ What It Is:
Gradually replaces old pods with new pods in batches.
Ensures zero downtime.
No need for new services or deployments‚Äîjust update the existing Deployment.
----------------------------------------------------------------------------------------------------------------
‚úÖ How It Works:
Starts new pods ‚ûî Waits for readiness ‚ûî Terminates old pods ‚ûî Repeats.
----------------------------------------------------------------------------------------------------------------
‚úÖ Example:
strategy:
  type: RollingUpdate
  rollingUpdate:
    maxSurge: 1
    maxUnavailable: 1
----------------------------------------------------------------------------------------------------------------
‚úÖ Real-Time Use Case:
Most web applications, microservices, REST APIs where downtime is unacceptable.
----------------------------------------------------------------------------------------------------------------
‚úÖ Pros:
Zero downtime.
Built-in and easy.
‚úÖ Cons:
No manual traffic control.
Harder to instantly roll back if issues occur.
----------------------------------------------------------------------------------------------------------------
‚úÖ Rollback:
kubectl rollout undo deployment my-app
===================================================================================================
RECREATE DEPLOYMENT
===================================================================================================
‚úÖ What It Is:
Stops all old pods first, then starts new pods.
Causes downtime, but ensures clean state.
----------------------------------------------------------------------------------------------------------------
‚úÖ Example:
strategy:
  type: Recreate
----------------------------------------------------------------------------------------------------------------
‚úÖ Real-Time Use Case:
Applications that cannot have multiple versions running at once (e.g., apps with strict database schema dependencies).
----------------------------------------------------------------------------------------------------------------
‚úÖ Pros:
Clean restart, fewer version conflicts.
----------------------------------------------------------------------------------------------------------------
‚úÖ Cons:
Downtime.
Not suitable for high-availability apps.
===================================================================================================
BLUE-GREEN DEPLOYMENT
===================================================================================================
‚úÖ What It Is:
Maintain two parallel environments:
Blue = current version.
Green = new version.

Switch all traffic to Green when it's tested and ready.
----------------------------------------------------------------------------------------------------------------
‚úÖ How:
Two Deployments (Blue & Green).
One Service that switches between them.
----------------------------------------------------------------------------------------------------------------
‚úÖ Real-Time Use Case:
Finance, Healthcare, eCommerce where instant rollback is mandatory.
----------------------------------------------------------------------------------------------------------------
‚úÖ Pros:
Zero downtime.
Easy rollback (just flip the Service selector).
----------------------------------------------------------------------------------------------------------------
‚úÖ Cons:
Needs double resources (both environments run in parallel).
More complex.
----------------------------------------------------------------------------------------------------------------
‚úÖ Switch Service:
kubectl patch service my-app-service -p '{"spec":{"selector":{"version":"green"}}}'
kubectl set image deployment/<deployment-name> <container-name>=<image>:<tag> -n <namespace>
===================================================================================================
CANARY DEPLOYMENT
===================================================================================================
‚úÖ What It Is:
Gradually release new version to a small percentage of users.
Slowly increase exposure while monitoring metrics.
Roll back instantly if issues appear.
----------------------------------------------------------------------------------------------------------------
‚úÖ How:
Deploy canary deployment with fewer replicas.
One shared Service.
----------------------------------------------------------------------------------------------------------------
‚úÖ Real-Time Use Case:
High-risk apps like payment systems, critical APIs.
----------------------------------------------------------------------------------------------------------------
‚úÖ Pros:
Minimal risk.
Early detection of problems.
----------------------------------------------------------------------------------------------------------------
‚úÖ Cons:
Requires manual or automated scaling.
Monitoring is essential.
----------------------------------------------------------------------------------------------------------------
‚úÖ Commands:
kubectl scale deployment my-app-canary --replicas=3
===================================================================================================
üìä Deployment Strategy Comparison:
Strategy | Downtime | Rollback Speed Traffic Control | Resource Cost
----------------------------------------------------------------------------------------------------------------
Rolling Update ‚ùå None Medium ‚ùå No Low
Recreate ‚úÖ Yes Medium ‚ùå No Low
Blue-Green ‚ùå None ‚úÖ Instant ‚úÖ Yes High (double)
Canary ‚ùå None ‚úÖ Instant ‚úÖ Yes (partial) Medium
===================================================================================================
üìù Key Points in Production:
‚úÖ Always use Rolling Update or Blue-Green for stateless applications.
‚úÖ Use Canary for high-risk changes where user experience is critical.
‚úÖ Avoid Recreate unless the app requires it (legacy or stateful apps).
