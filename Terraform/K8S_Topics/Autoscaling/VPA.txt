==========================================================================================================
Vertical Pod Autoscaler (VPA)
==========================================================================================================
-VPA automatically adjusts the CPU and Memory “requests and limits” of your Kubernetes pods up or down based on their actual usage.
👉 It does not change the number of pods.
👉 It does not change the nodes.
👉 It simply changes the size of each pod (resources).
----------------------------------------------------------------------------------------------------------
📝 Why Do We Need VPA in Production?
✅ Example Scenario 1:
You deploy an app and give it:
CPU Request: 100m
Memory Request: 256Mi

But over time, the app consistently uses:
CPU: 400m
Memory: 800Mi

👉 Result: Your pod might get killed (OOMKilled) or throttled because the initial request was too small.
✅ With VPA:
It will observe the actual usage and automatically increase the request and limit values in the deployment.
It will restart the pod with the new right-sized values (this is normal).
----------------------------------------------------------------------------------------------------------
✅ Example Scenario 2:
You over-provision your pod with:
CPU Request: 1000m
Memory Request: 2Gi

But the app only uses:
CPU: 100m
Memory: 300Mi

👉 VPA will recommend and set smaller values, saving cloud cost.
----------------------------------------------------------------------------------------------------------
🔑 How VPA Works:
Step Action
1️⃣ You create your app Deployment with any initial CPU & Memory.
2️⃣ You create a VerticalPodAutoscaler (VPA) object targeting that Deployment.
3️⃣ VPA controller continuously measures real CPU/Memory consumption.
4️⃣ If needed, VPA updates the Deployment's resource requests/limits.
5️⃣ The pod gets automatically restarted with the new values.

----------------------------------------------------------------------------------------------------------
📄 Real-Time VPA YAML (with Explanation)
apiVersion: autoscaling.k8s.io/v1
kind: VerticalPodAutoscaler
metadata:
  name: my-app-vpa
  namespace: production
spec:
  targetRef:                          # Link to your Deployment
    apiVersion: "apps/v1"
    kind: Deployment
    name: my-app
  updatePolicy:
    updateMode: "Auto"                 # Auto = VPA actively updates & restarts pod
  resourcePolicy:                      # (Optional) Limit how far up/down VPA can go
    containerPolicies:
    - containerName: '*'               # Apply to all containers in the pod
      minAllowed:
        cpu: "100m"
        memory: "256Mi"
      maxAllowed:
        cpu: "2000m"
        memory: "2Gi"
----------------------------------------------------------------------------------------------------------
✅ VPA Modes (Important to Understand):
Mode What it Does Restart?
-Auto > VPA automatically updates resource values and triggers pod restart Yes ✅
-Initial > VPA only sets resource values when pod is created, no ongoing changes Only at creation
-Off > VPA gives recommendations only, no action No

👉 You can view recommendations without applying:
kubectl describe vpa my-app-vpa -n production

----------------------------------------------------------------------------------------------------------
🔄 Summary Table (HPA vs VPA vs Cluster Autoscaler)
Feature HPA VPA Cluster Autoscaler

Scales by Number of pods > CPU/Memory per pod > Number of worker nodes
Reacts to CPU, Memory, custom metrics > Actual resource consumption > Pending pods, node usage
Requires Pod Restart? No > Yes > No (but schedules pods to new nodes)
Typical Use Case > Web apps, APIs > Stateful, batch, slow apps > Infrastructure scaling
----------------------------------------------------------------------------------------------------------
✅ VPA is most useful when:
Your app’s resource needs change over time.
You don’t know the right CPU/Memory sizes in advance.
You want to save cloud cost or avoid pod OOMKills.
------------------------------------------------------------------------------------------------------------
👉 I can help you: ✅ Install VPA step by step
✅ Show logs and recommendations in real time
✅ Combine VPA + HPA safely (yes, it’s possible but tricky)
